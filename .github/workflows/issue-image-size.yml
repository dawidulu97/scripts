name: Issue - Extract Image Size

on:
  issues:
    types: [opened, edited]

jobs:
  analyze-image:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Fix APT mirrors and install ImageMagick
        shell: bash
        run: |
          set -euo pipefail
          sudo rm -f /etc/apt/apt-mirrors.txt || true
          sudo apt-get update
          retry() { for i in {1..3}; do "$@" && break || { echo "Retry $i/3 failed"; sleep 3; }; done; }
          retry sudo apt-get install -y --no-install-recommends imagemagick curl ca-certificates file

      - name: Extract first image URL from issue body
        id: extract
        shell: bash
        env:
          BODY: ${{ github.event.issue.body }}
        run: |
          set -euo pipefail
          # Match first Markdown image: ![alt](url)
          URL=$(printf '%s\n' "$BODY" \
            | grep -Eo '!\[[^]]*\]\((https?://[^) ]+)\)' -m1 \
            | sed -E 's/.*\((https?:\/\/[^) ]+)\).*/\1/' \
            || true)
          if [[ -z "${URL:-}" ]]; then
            # Fallback: plain image URL
            URL=$(printf '%s\n' "$BODY" | grep -Eo 'https?://[^ )"]+\.(png|jpg|jpeg|gif|webp|bmp|tiff)' -im1 | head -n1 || true)
          fi
          if [[ -z "${URL:-}" ]]; then
            echo "No image URL found in issue body."
            echo "found=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "found=1" >> "$GITHUB_OUTPUT"

      - name: Download image
        if: steps.extract.outputs.found == '1'
        id: download
        shell: bash
        run: |
          set -euo pipefail
          curl -L --fail --retry 3 --connect-timeout 10 "${{ steps.extract.outputs.url }}" -o issue_image
          file issue_image || true
          echo "path=issue_image" >> "$GITHUB_OUTPUT"

      - name: Compute image size
        if: steps.extract.outputs.found == '1'
        id: size
        shell: bash
        run: |
          set -euo pipefail
          SIZE=$(identify -format "%wx%h" "${{ steps.download.outputs.path }}")
          echo "size=$SIZE" >> "$GITHUB_OUTPUT"

      - name: Comment result on the issue
        if: steps.extract.outputs.found == '1'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          gh issue comment ${{ github.event.issue.number }} --body "Detected image size: ${{ steps.size.outputs.size }} (from ${{ steps.extract.outputs.url }})"
