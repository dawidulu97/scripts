name: Build Coreboot for a Chromebook
run-name: Build ${{ github.event.issue.title }} for ${{ github.actor }}

on:
  issues:
    types:
      - opened
      - reopened

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Dump GitHub context (For Debugging)
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      - name: Fix APT mirrors and install base dependencies
        shell: bash
        run: |
          set -euo pipefail
          # 1) Remove mirror file and deb822 source that may force mirror+file
          sudo rm -f /etc/apt/apt-mirrors.txt || true
          sudo rm -f /etc/apt/sources.list.d/ubuntu.sources || true
          # 2) Rebuild sources.list using the actual Ubuntu codename
          CODENAME=$( . /etc/os-release && echo "$UBUNTU_CODENAME" )
          cat <<EOF | sudo tee /etc/apt/sources.list > /dev/null
          deb http://archive.ubuntu.com/ubuntu $CODENAME main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu $CODENAME-updates main restricted universe multiverse
          deb http://security.ubuntu.com/ubuntu $CODENAME-security main restricted universe multiverse
          EOF
          # 3) As a fallback, replace any lingering mirror+file in classic or deb822 lists
          sudo bash -lc 'shopt -s nullglob; for f in /etc/apt/sources.list /etc/apt/sources.list.d/*.list /etc/apt/sources.list.d/*.sources; do sed -i "s|mirror\\+file:/etc/apt/apt-mirrors.txt|http://archive.ubuntu.com/ubuntu|g" "$f" || true; done'
          sudo apt-get update -o Acquire::Retries=3
          retry() { for i in {1..3}; do "$@" && break || { echo "Retry $i/3 failed"; sleep 3; }; done; }
          retry sudo apt-get install -y --no-install-recommends --fix-missing \
            bison build-essential curl flex git gnat libncurses5-dev m4 nasm python-is-python3 python3-pip uuid-dev zlib1g-dev
          python3 -m pip install --user --no-cache-dir pillow
          # If needed for ImageMagick features, uncomment:
          # retry sudo apt-get install -y ghostscript

      - name: Extract image URL from issue body
        id: img_url
        shell: bash
        env:
          BODY: ${{ github.event.issue.body }}
        run: |
          set -euo pipefail
          URL=$(printf '%s\n' "$BODY" \
            | grep -Eo '!\[[^]]*\]\((https?://[^) ]+)\)' -m1 \
            | sed -E 's/.*\((https?:\/\/[^) ]+)\).*/\1/' \
            || true)
          if [[ -z "${URL:-}" ]]; then
            URL=$(printf '%s\n' "$BODY" | grep -Eo 'https?://[^ )"]+\.(png|jpg|jpeg|gif|webp|bmp|tiff)' -im1 | head -n1 || true)
          fi
          if [[ -n "${URL:-}" ]]; then
            echo "url=$URL" >> "$GITHUB_OUTPUT"
          fi

      - name: Download image
        if: ${{ steps.img_url.outputs.url != '' }}
        id: download_image
        shell: bash
        run: |
          set -euo pipefail
          curl -L --fail --retry 3 --connect-timeout 10 "${{ steps.img_url.outputs.url }}" -o issue_image
          echo "path=issue_image" >> "$GITHUB_OUTPUT"

      - name: Compute image size (Pillow)
        if: ${{ steps.img_url.outputs.url != '' }}
        id: image_size
        shell: bash
        run: |
          set -euo pipefail
          SIZE=$(python3 - <<'PY'
from PIL import Image
im = Image.open("${{ steps.download_image.outputs.path }}")
print(f"{im.width}x{im.height}")
PY
          )
          echo "size=$SIZE" >> "$GITHUB_OUTPUT"

      - name: Add size to job summary
        if: ${{ steps.image_size.outputs.size != '' }}
        shell: bash
        run: |
          echo "Detected image size: ${{ steps.image_size.outputs.size }}" >> "$GITHUB_STEP_SUMMARY"

      - name: Prefix issue title with image size
        if: ${{ steps.image_size.outputs.size != '' }}
        uses: actions/github-script@v6
        with:
          script: |
            const size = `${{ steps.image_size.outputs.size }}`;
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const { data: current } = await github.rest.issues.get({ owner, repo, issue_number });
            const hasPrefix = current.title.startsWith(`[${size}]`);
            const newTitle = hasPrefix ? current.title : `[${size}] ${current.title}`;
            if (!hasPrefix) {
              await github.rest.issues.update({ owner, repo, issue_number, title: newTitle });
            }

      - name: Set build label
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["build"]
            })

      - name: Create comment (build started)
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            A GitHub Actions build has started for this custom logo.
            Link to view progress: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            ${{ steps.image_size.outputs.size && format('Detected image size: {0}', steps.image_size.outputs.size) || '' }}

      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache npm directory
        uses: actions/cache@v3
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies for Logo Replacing Script
        run: npm install
        working-directory: action-ts

      - id: script
        name: Run Logo Replacing Script
        run: npm start
        working-directory: action-ts
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Restore cached coreboot toolchain
        id: cache-coreboot-toolchain-restore
        uses: actions/cache/restore@v3
        with:
          path: |
            coreboot/util/crossgcc/tarballs
            coreboot/util/crossgcc/xgcc
          key: coreboot-cache-toolchain-v2

      - name: Build Coreboot Toolchain
        working-directory: coreboot
        run: make crossgcc-i386 CPUS=$(nproc)

      - name: Save coreboot toolchain
        uses: actions/cache/save@v3
        with:
          path: |
            coreboot/util/crossgcc/tarballs
            coreboot/util/crossgcc/xgcc
          key: ${{ steps.cache-coreboot-toolchain-restore.outputs.cache-primary-key }}

      - name: Restore coreboot build cache
        id: cache-coreboot-build-restore
        uses: actions/cache/restore@v3
        with:
          path: coreboot/payloads/external/edk2/workspace
          key: coreboot-cache-build-v2

      - name: Set build Full Rom label
        if: ${{ steps.script.outputs.firmwareType == 'FULL_ROM' }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["build-full-rom"]
            })

      - name: Build Full ROM
        if: ${{ steps.script.outputs.firmwareType == 'FULL_ROM' }}
        id: build-full-rom
        run: ./action-sh/build-full-rom.sh
        env:
          BOARD_NAME: ${{ steps.script.outputs.boardName }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}

      - name: Set build Alt FW label
        if: ${{ steps.script.outputs.firmwareType == 'ALT_FW' }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["build-alt-fw"]
            })

      - name: Customize Alt FW
        if: ${{ steps.script.outputs.firmwareType == 'ALT_FW' }}
        id: build-alt-fw
        run: ./action-sh/build-rwl.sh
        env:
          BOARD_NAME: ${{ steps.script.outputs.boardName }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}

      - name: Save coreboot build cache
        uses: actions/cache/save@v3
        with:
          path: coreboot/payloads/external/edk2/workspace
          key: ${{ steps.cache-coreboot-build-restore.outputs.cache-primary-key }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-full-rom.outputs.artifactName }}${{ steps.build-alt-fw.outputs.artifactName }}
          path: ${{ steps.build-full-rom.outputs.artifactPath }}${{ steps.build-alt-fw.outputs.artifactPath }}

      - name: Set success label
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["success"]
            })

      - name: Remove failure label
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          labels: failure

      - name: Close Issue
        run: gh issue close --comment "The GitHub Action is complete! Download the artifact of the run to flash the firmware" ${{ github.event.issue.number }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  report-failure:
    needs:
      - build
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set failure label
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["failure"]
            })

      - name: Remove success label
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          labels: success

      - name: Close Issue
        run: gh issue close --comment "The GitHub Action has failed! See the logs for details" ${{ github.event.issue.number }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
